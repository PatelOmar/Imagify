{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nimport \"firebase/storage\";\nimport { useAuthState } from 'react-firebase-hooks/auth';\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\n\nrequire('dotenv').config();\n\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_APIKEY,\n  authDomain: process.env.REACT_APP_AUTHDOMAIN,\n  projectId: process.env.REACT_APP_PORJECTID,\n  storageBucket: process.env.REACT_APP_STORAGEBUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGINGSENDERID,\n  appId: process.env.REACT_APP_APPID,\n  measurementId: process.env.REACT_APP_MEASUREMENTID\n};\nfirebase.initializeApp(firebaseConfig);\nexport const db = firebase.firestore();\nexport const auth = firebase.auth();\nexport const storage = firebase.storage();\nexport const authSignIn = async () => {\n  const provider = new firebase.auth.GoogleAuthProvider();\n  auth.signInWithPopup(provider);\n};\nexport const uploadImage = async url => {\n  try {\n    await db.collection('images').add({\n      url: url,\n      uid: auth.currentUser.uid,\n      publicPermission: false\n    });\n    return true;\n  } catch (err) {\n    console.log(err);\n    return false;\n  }\n};\nexport const updateImagePermission = async (id, permission) => {\n  try {\n    console.log(permission);\n    await db.collection('images').doc(id).update({\n      publicPermission: permission\n    });\n    return true;\n  } catch (err) {\n    console.log(err);\n    return false;\n  }\n};","map":{"version":3,"sources":["/Users/omarp/workspace/Shopify_Image_Repo_Challenge/Imagify/src/firebase/firestore.js"],"names":["firebase","useAuthState","useCollectionData","require","config","firebaseConfig","apiKey","process","env","REACT_APP_APIKEY","authDomain","REACT_APP_AUTHDOMAIN","projectId","REACT_APP_PORJECTID","storageBucket","REACT_APP_STORAGEBUCKET","messagingSenderId","REACT_APP_MESSAGINGSENDERID","appId","REACT_APP_APPID","measurementId","REACT_APP_MEASUREMENTID","initializeApp","db","firestore","auth","storage","authSignIn","provider","GoogleAuthProvider","signInWithPopup","uploadImage","url","collection","add","uid","currentUser","publicPermission","err","console","log","updateImagePermission","id","permission","doc","update"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,oBAAP;AACA,OAAO,eAAP;AACA,OAAO,kBAAP;AACA,SAASC,YAAT,QAA6B,2BAA7B;AACA,SAASC,iBAAT,QAAkC,gCAAlC;;AACAC,OAAO,CAAC,QAAD,CAAP,CAAkBC,MAAlB;;AAEA,MAAMC,cAAc,GAAG;AACnBC,EAAAA,MAAM,EAAEC,OAAO,CAACC,GAAR,CAAYC,gBADD;AAEnBC,EAAAA,UAAU,EAAEH,OAAO,CAACC,GAAR,CAAYG,oBAFL;AAGnBC,EAAAA,SAAS,EAAEL,OAAO,CAACC,GAAR,CAAYK,mBAHJ;AAInBC,EAAAA,aAAa,EAAEP,OAAO,CAACC,GAAR,CAAYO,uBAJR;AAKnBC,EAAAA,iBAAiB,EAAET,OAAO,CAACC,GAAR,CAAYS,2BALZ;AAMnBC,EAAAA,KAAK,EAAEX,OAAO,CAACC,GAAR,CAAYW,eANA;AAOnBC,EAAAA,aAAa,EAAEb,OAAO,CAACC,GAAR,CAAYa;AAPR,CAAvB;AAUArB,QAAQ,CAACsB,aAAT,CAAuBjB,cAAvB;AAEA,OAAO,MAAMkB,EAAE,GAAGvB,QAAQ,CAACwB,SAAT,EAAX;AACP,OAAO,MAAMC,IAAI,GAAGzB,QAAQ,CAACyB,IAAT,EAAb;AACP,OAAO,MAAMC,OAAO,GAAG1B,QAAQ,CAAC0B,OAAT,EAAhB;AAEP,OAAO,MAAMC,UAAU,GAAG,YAAY;AAClC,QAAMC,QAAQ,GAAG,IAAI5B,QAAQ,CAACyB,IAAT,CAAcI,kBAAlB,EAAjB;AACAJ,EAAAA,IAAI,CAACK,eAAL,CAAqBF,QAArB;AACH,CAHM;AAKP,OAAO,MAAMG,WAAW,GAAG,MAAOC,GAAP,IAAe;AACtC,MAAG;AACC,UAAMT,EAAE,CAACU,UAAH,CAAc,QAAd,EAAwBC,GAAxB,CAA4B;AAC9BF,MAAAA,GAAG,EAAEA,GADyB;AAE9BG,MAAAA,GAAG,EAAEV,IAAI,CAACW,WAAL,CAAiBD,GAFQ;AAG9BE,MAAAA,gBAAgB,EAAE;AAHY,KAA5B,CAAN;AAMA,WAAO,IAAP;AACH,GARD,CAQE,OAAOC,GAAP,EAAW;AACTC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA,WAAO,KAAP;AACH;AACJ,CAbM;AAeP,OAAO,MAAMG,qBAAqB,GAAG,OAAOC,EAAP,EAAWC,UAAX,KAA0B;AAC3D,MAAG;AACCJ,IAAAA,OAAO,CAACC,GAAR,CAAYG,UAAZ;AACA,UAAMpB,EAAE,CAACU,UAAH,CAAc,QAAd,EAAwBW,GAAxB,CAA4BF,EAA5B,EAAgCG,MAAhC,CAAuC;AACzCR,MAAAA,gBAAgB,EAAEM;AADuB,KAAvC,CAAN;AAIA,WAAO,IAAP;AACH,GAPD,CAOE,OAAOL,GAAP,EAAW;AACTC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA,WAAO,KAAP;AACH;AACJ,CAZM","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nimport \"firebase/storage\";\nimport { useAuthState } from 'react-firebase-hooks/auth';\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\nrequire('dotenv').config();\n\nconst firebaseConfig = {\n    apiKey: process.env.REACT_APP_APIKEY,\n    authDomain: process.env.REACT_APP_AUTHDOMAIN,\n    projectId: process.env.REACT_APP_PORJECTID,\n    storageBucket: process.env.REACT_APP_STORAGEBUCKET,\n    messagingSenderId: process.env.REACT_APP_MESSAGINGSENDERID,\n    appId: process.env.REACT_APP_APPID,\n    measurementId: process.env.REACT_APP_MEASUREMENTID\n  };\n\nfirebase.initializeApp(firebaseConfig);\n\nexport const db = firebase.firestore();\nexport const auth = firebase.auth();\nexport const storage = firebase.storage();\n\nexport const authSignIn = async () => {\n    const provider = new firebase.auth.GoogleAuthProvider();\n    auth.signInWithPopup(provider);\n}\n\nexport const uploadImage = async (url) => {\n    try{\n        await db.collection('images').add({\n            url: url,\n            uid: auth.currentUser.uid,\n            publicPermission: false,\n        });\n        \n        return true;\n    } catch (err){\n        console.log(err);\n        return false;\n    }\n}\n\nexport const updateImagePermission = async (id, permission) => {\n    try{\n        console.log(permission);\n        await db.collection('images').doc(id).update({\n            publicPermission: permission,\n        });\n        \n        return true;\n    } catch (err){\n        console.log(err);\n        return false;\n    }\n}"]},"metadata":{},"sourceType":"module"}