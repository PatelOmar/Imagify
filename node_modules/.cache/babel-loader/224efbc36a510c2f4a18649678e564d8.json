{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/omarp/workspace/Shopify_Image_Repo_Challenge/Imagify/src/components/SignedIn.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef } from \"react\";\nimport Button from 'react-bootstrap/Button';\nimport { useHistory } from \"react-router-dom\";\nimport * as FirestoreService from '../firebase/firestore';\nimport Form from 'react-bootstrap/Form';\nimport imageCompression from 'browser-image-compression';\nexport default function SignedIn() {\n  _s();\n\n  let history = useHistory();\n  const [images, setImages] = useState([]);\n  const [compressedImages, setCompressedImages] = useState([]);\n  const [click, setClick] = useState(false);\n  const fileInput = useRef(null);\n\n  const handleChange = async e => {\n    setClick(!click);\n    const options = {\n      maxSizeMB: 1,\n      maxWidthOrHeight: 1920,\n      useWebWorker: true\n    };\n    console.log(\"Started!\");\n    let tempCompressedImages = [];\n    let tempImages = [];\n    const files = e.target.files;\n\n    for (let i = 0; i < files.length; i++) {\n      if (e.target.files[i]) {\n        try {\n          const compressedFile = await imageCompression(e.target.files[i], options);\n          tempCompressedImages.push(compressedFile);\n          tempImages.push(e.target.files[i]);\n        } catch (error) {\n          console.log(error);\n        }\n      }\n    }\n\n    try {\n      setCompressedImages(tempCompressedImages);\n      setImages(tempImages);\n    } catch (error) {\n      console.log(error);\n    }\n\n    console.log(\"Files ready for upload!\");\n    setClick(!click); // if(e.target.files[0]){\n    //     try {\n    //         console.log(\"Started\");\n    //         const compressedFile = await imageCompression(e.target.files[0], options);\n    //         console.log(\"worked\");\n    //         setCompressedImage(compressedFile);\n    //         setImage(e.target.files[0]);\n    //         // await uploadToServer(compressedFile); // write your own logic\n    //       } catch (error) {\n    //         console.log(error);\n    //       }\n    // }\n  };\n\n  const handleUpload = async () => {\n    // console.log(image);\n    // console.log(compressedImage);\n    setClick(!click);\n\n    for (let i = 0; i < compressedImages.length; i++) {\n      const uploadTask = await FirestoreService.storage.ref(`images/${compressedImages[i].name}`).put(compressedImages[i]);\n      console.log(\"Uploaded\");\n      uploadTask.task.on(\"state_changed\", snapshot => {}, error => {\n        console.log(error);\n      }, () => {\n        FirestoreService.storage.ref(\"images\").child(compressedImages[i].name).getDownloadURL().then(async url => {\n          // console.log(url);\n          let uploaded = await FirestoreService.uploadImage(url);\n          console.log(\"Uploaded: \" + uploaded);\n        });\n      });\n    }\n\n    console.log(\"Uploaded!\");\n    setCompressedImages([]);\n    setImages([]);\n    setClick(!click);\n  };\n\n  function handleClick() {\n    fileInput.current.click();\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Page-home-buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        style: {\n          display: \"none\"\n        },\n        type: \"file\",\n        onChange: handleChange,\n        ref: fileInput\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: handleClick,\n        variant: \"outline-info\",\n        size: \"lg\",\n        children: \"Add Files\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"Spacer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"outline-info\",\n        size: \"lg\",\n        disabled: false,\n        onClick: handleUpload,\n        children: \"Upload\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 9\n  }, this);\n}\n\n_s(SignedIn, \"iR9THBGLRBZ9yVUHvUJduhQFz/M=\", false, function () {\n  return [useHistory];\n});\n\n_c = SignedIn;\n\nvar _c;\n\n$RefreshReg$(_c, \"SignedIn\");","map":{"version":3,"sources":["/Users/omarp/workspace/Shopify_Image_Repo_Challenge/Imagify/src/components/SignedIn.js"],"names":["React","useState","useRef","Button","useHistory","FirestoreService","Form","imageCompression","SignedIn","history","images","setImages","compressedImages","setCompressedImages","click","setClick","fileInput","handleChange","e","options","maxSizeMB","maxWidthOrHeight","useWebWorker","console","log","tempCompressedImages","tempImages","files","target","i","length","compressedFile","push","error","handleUpload","uploadTask","storage","ref","name","put","task","on","snapshot","child","getDownloadURL","then","url","uploaded","uploadImage","handleClick","current","display"],"mappings":"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","sourcesContent":["import React, { useState, useRef } from \"react\";\nimport Button from 'react-bootstrap/Button'\nimport { useHistory } from \"react-router-dom\";\nimport * as FirestoreService from '../firebase/firestore';\nimport Form from 'react-bootstrap/Form';\nimport imageCompression from 'browser-image-compression';\n\nexport default function SignedIn() {\n    let history = useHistory();\n    const [images,setImages] = useState([]);\n    const [compressedImages,setCompressedImages] = useState([]);\n    const [click,setClick] = useState(false);\n    const fileInput = useRef(null);\n\n    const handleChange = async(e) =>{\n        setClick(!click);\n        const options = {\n            maxSizeMB: 1,\n            maxWidthOrHeight: 1920,\n            useWebWorker: true\n        }\n        console.log(\"Started!\");\n        let tempCompressedImages = [];\n        let tempImages = [];\n        const files = e.target.files;\n        for (let i = 0; i < files.length; i++){\n            if(e.target.files[i]){\n                try {\n                    const compressedFile = await imageCompression(e.target.files[i], options);\n                    tempCompressedImages.push(compressedFile);\n                    tempImages.push(e.target.files[i]);\n                    } catch (error) {\n                    console.log(error);\n                    }\n            }\n        }\n        try{\n            setCompressedImages(tempCompressedImages);\n            setImages(tempImages);\n        }   catch (error) {\n            console.log(error);\n        }\n        console.log(\"Files ready for upload!\");\n        setClick(!click);\n        // if(e.target.files[0]){\n        //     try {\n        //         console.log(\"Started\");\n        //         const compressedFile = await imageCompression(e.target.files[0], options);\n        //         console.log(\"worked\");\n        //         setCompressedImage(compressedFile);\n        //         setImage(e.target.files[0]);\n        //         // await uploadToServer(compressedFile); // write your own logic\n        //       } catch (error) {\n        //         console.log(error);\n        //       }\n        // }\n        \n    }\n    const handleUpload = async() =>{\n        // console.log(image);\n        // console.log(compressedImage);\n        setClick(!click);\n        for (let i = 0; i < compressedImages.length; i++){\n            const uploadTask = await FirestoreService.storage.ref(`images/${compressedImages[i].name}`).put(compressedImages[i]);\n            console.log(\"Uploaded\");\n            uploadTask.task.on(\"state_changed\", \n                            snapshot => {}, \n                            error =>{\n                                console.log(error);\n                            },\n                            () =>  {\n                                FirestoreService.storage.ref(\"images\").child(compressedImages[i].name).getDownloadURL().then(async (url) => {\n                                    // console.log(url);\n                                    \n                                    let uploaded = await FirestoreService.uploadImage(url);\n                                    console.log(\"Uploaded: \"+uploaded);\n                                });\n                            });\n        }  \n        console.log(\"Uploaded!\");\n        setCompressedImages([]);\n        setImages([]);  \n        setClick(!click);       \n    }\n    function handleClick() {\n        fileInput.current.click();\n      }\n    return (\n        <div>\n            <div className=\"Page-home-buttons\">\n                <input style= {{display: \"none\"}} type=\"file\" onChange={handleChange} ref={fileInput}/>\n                <Button onClick={handleClick} variant=\"outline-info\"  size=\"lg\">Add Files</Button> \n                <span className=\"Spacer\"/>\n                <Button variant=\"outline-info\"  size=\"lg\" disabled={false} onClick={handleUpload}>Upload</Button> \n            </div> \n        </div> \n    )\n}"]},"metadata":{},"sourceType":"module"}